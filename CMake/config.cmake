# Detect system
if(CMAKE_CROSSCOMPILING)
  message("Cross compiling.")
else()
  if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    if(WEBOTS_HOME)
      Set(LIBXR_SYSTEM "Webots")
      Set(LIBXR_DRIVER "Webots")
    else()
      Set(LIBXR_SYSTEM "Linux")
      Set(LIBXR_DRIVER "Linux")
    endif()
  elseif(CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
    Set(LIBXR_SYSTEM "Windows")
    Set(LIBXR_DRIVER "Windows")
  elseif()
    message(FATAL_ERROR "Unkonw system.")
  endif()
endif()

if(NOT LIBXR_SYSTEM)
  message(FATAL_ERROR "No system select.")
endif()

if(NOT LIBXR_DRIVER)
  message(WARNING "No driver select.")
endif()

add_compile_definitions(LIBXR_SYSTEM ${LIBXR_SYSTEM})

if("${LIBXR_SYSTEM}" STREQUAL "None" OR "${LIBXR_SYSTEM}" STREQUAL "WebAsm")
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_NOT_SUPPORT_MUTI_THREAD=1)
  message("Not support multi thread.")
endif()

message("-- Platfrom: ${LIBXR_SYSTEM}")

if(LIBXR_DEFAULT_SCALAR)
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_DEFAULT_SCALAR=${LIBXR_DEFAULT_SCALAR})
else()
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_DEFAULT_SCALAR=double)
endif()

if(LIBXR_PRINTF_BUFFER_SIZE)
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_PRINTF_BUFFER_SIZE=${LIBXR_PRINTF_BUFFER_SIZE})
else()
  if(LIBXR_SYSTEM STREQUAL "Linux" OR LIBXR_SYSTEM STREQUAL "Webots")
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_PRINTF_BUFFER_SIZE=1024)
  else()
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_PRINTF_BUFFER_SIZE=128)
  endif()
endif()

if(NOT LIBXR_LOG_LEVEL)
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_LOG_LEVEL=4)
else()
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_LOG_LEVEL=${LIBXR_LOG_LEVEL})
endif()

if(NOT LIBXR_LOG_OUTPUT_LEVEL)
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_LOG_OUTPUT_LEVEL=4)
else()
  target_compile_definitions(${PROJECT_NAME} PUBLIC LIBXR_LOG_OUTPUT_LEVEL=${LIBXR_LOG_OUTPUT_LEVEL})
endif()

if(NOT XR_LOG_MESSAGE_MAX_LEN)
  if(LIBXR_SYSTEM STREQUAL "Linux" OR LIBXR_SYSTEM STREQUAL "Webots")
    target_compile_definitions(${PROJECT_NAME} PUBLIC XR_LOG_MESSAGE_MAX_LEN=256)
  else()
    target_compile_definitions(${PROJECT_NAME} PUBLIC XR_LOG_MESSAGE_MAX_LEN=64)
  endif()
else()
  target_compile_definitions(${PROJECT_NAME} PUBLIC XR_LOG_MESSAGE_MAX_LEN=${XR_LOG_MESSAGE_MAX_LEN})
endif()
